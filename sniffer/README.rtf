{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww15800\viewh10840\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs24 \cf0 All files are python files. They were written in python3 and executed on Ubuntu 16.04 LTS (64-bit) VM on MacOs(10.13.6). \
\
mysniffer.py:
\b0  This file is the packet sniffer. It reads every packet entering and leaving the Ubuntu network stack. It processes packets to identify those that are HTTP basic authentication request packets headed towards the IoT device. It extracts the username, password and source IP address information. This is used to identify if default credentials are used to login. It is also used to monitor the number of login attempts from this IP for this particular username. Currently, if there are more than 4 login attempts in 30 minutes, an alert is raised. All alerts are logged to a file called \'91snort.log\'92 currently.\
\
The following variables are configurable:\
default_u : default username for logging into IoT device \
default_p : default password for logging into IoT device \
TIME_BOUND : This is the time duration for which you would like an alert to be raised if there are too many login attempts\
MAX_ATTEMPT : Number of attempts in \'91TIME_BOUND\'92 minutes that\'92s permissible, beyond which an alert will be raised\
IOT_SERVER_PORT : The TCP port on which the http server application is running on the IoT device\
\

\b BasicClient.py:
\b0 \
This file plays the role of the application via which a hacker is attempting to login to the IoT device.\
The current username is set as \'93Username\'94 and password as \'93Password\'94. This can be changed to anything else as needed, keeping in mind to only use printable ascii character. The login packets use HTTP Basic Authentication.\
\

\b BasicServer.py:
\b0 \
This file is the HTTP server application on the IoT device.\
\

\b monitorlog.py:
\b0 \
This application will tail the log file \'91snort.log\'92 created by the packet sniffer to check for alerts. If an alert is detected, the controller is notified.\
The controller address can be configured using following variables:\
LOG_PATH = "sniffer.log"\
ALERT_HANDLER_SERVER = u"0.0.0.0"\
ALERT_HANDLER_URL = "/alert/"\
ALERT_HANDLER_PORT = 8000\
\
\
\bInstallation guide:
\b0 \
1. monitorlog.py: It will throw the following error if you try to run it using python3:\
ImportError: No module named 'netifaces'\
To fix this, we need to first install pip3, and then netifaces.\
To instal pip3:\
1a. sudo apt-get update\
1b. sudo apt-get install python3-pip\
\
Then install netifaces:\
1c. pip3 install netifaces\
\
Now monitorlog.py should run on python3\
\
\
2. To run a simple HTTP server, which would act like the controller to which monitorlog would send alerts, install python 2 and run the following commands:\
To install python2: sudo apt-get install python2.7\
To start simple HTTP server: python2.7 -m SimpleHTTPServer\
\
BasicServer and BasicClient should be able to run as is.\
}